package fr.epita.quizmanager.datamodel;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.List;

public class MCQQuestionCSVDAO {

//	private static final String TOPIC_DELIMITER = "\|\|\|"; //you have to protect the | symbol to split it correctly
	private static final String TOPIC_DELIMITER = "@@@@";
	private static final String COLUMN_DELIMITER = "####";
	private static final String CHOICE_DELIMITER = "%%%";

	private File file = new File("/temp/questions.csv");

	public File getFile() {
		return file;
	}

	public MCQQuestionCSVDAO() {
		
	}

	public void createQuestionFile(MCQQuestion mcqQuestion) {
		String formatted = String.valueOf(mcqQuestion.getId()) + COLUMN_DELIMITER;
		formatted += String.valueOf(mcqQuestion.getDifficulty()) + COLUMN_DELIMITER + mcqQuestion.getContent()
				+ COLUMN_DELIMITER;

		String[] topics = mcqQuestion.getTopics();

		for (int i = 0; i < topics.length; i++) {
			if (i == topics.length - 1) {
				formatted += topics[i] + COLUMN_DELIMITER;
			} else {
				formatted += topics[i] + TOPIC_DELIMITER;
			}
		}

		List<MCQChoice> choices = mcqQuestion.getChoices();
		for (int i = 0; i < choices.size(); i++) {
			if (i == choices.size() - 1) {
				formatted += choices.get(i).getChoice() + COLUMN_DELIMITER;
			} else {
				formatted += choices.get(i).getChoice() + CHOICE_DELIMITER;
			}
		}

		// TODO write the formatted into a file
		// If we create writer as resource of try, it will be closed automatically after the final block.
		try (PrintWriter writer = new PrintWriter(new FileOutputStream(this.file, true));) {
			writer.println(formatted);
			writer.flush();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public List<MCQQuestion> readAllQuestions() {

		List<MCQQuestion> results = new ArrayList<MCQQuestion>();
		List<String> lines;
		try {
			lines = Files.readAllLines(this.file.toPath());
			for (String line : lines) {
				String[] parts = line.split(COLUMN_DELIMITER);

				Long id = Long.valueOf(parts[0]);
				Integer difficulty = Integer.valueOf(parts[1]);
				String content = parts[2];
				String[] readTopics = parts[3].split(TOPIC_DELIMITER);
				String[] readChoices = parts[4].split(CHOICE_DELIMITER);
				List<MCQChoice> choices = new ArrayList<MCQChoice>();

				for (int i = 0; i < readChoices.length; i++) {
					MCQChoice choice = new MCQChoice();
					choice.setChoice(readChoices[i]);
					choices.add(choice);
				}

				// Reconstruct data read from the file
				MCQQuestion reconstruction = new MCQQuestion();
				reconstruction.setDifficulty(difficulty);
				reconstruction.setContent(content);
				reconstruction.setTopics(readTopics);
				reconstruction.setChoices(choices);
				reconstruction.setId(id);

				results.add(reconstruction);
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return results;
	}

}
