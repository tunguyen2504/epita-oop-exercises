package fr.epita.quizmanager.datamodel;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class MCQQuestionCSVDAO {

//	private static final String TOPIC_DELIMITER = "||||";
	private static final String TOPIC_DELIMITER = "@@@@";
	private static final String COLUMN_DELIMITER = "####";
	private static final String CHOICE_DELIMITER = "$$$$";

	private File file = new File("/temp/questions.csv");
	private PrintWriter writer;

	public MCQQuestionCSVDAO() throws FileNotFoundException {
		this.writer = new PrintWriter(new FileOutputStream(this.file, true));
	}

	public void createQuestionFile(MCQQuestion mcqQuestion) {
		String formatted = String.valueOf(mcqQuestion.getId()) + COLUMN_DELIMITER;
		formatted += String.valueOf(mcqQuestion.getDifficulty()) + COLUMN_DELIMITER + mcqQuestion.getContent()
				+ COLUMN_DELIMITER;

		String[] topics = mcqQuestion.getTopics();

		for (int i = 0; i < topics.length; i++) {
			if (i == topics.length - 1) {
				formatted += topics[i] + COLUMN_DELIMITER;
			} else {
				formatted += topics[i] + TOPIC_DELIMITER;
			}
		}

		List<MCQChoice> choices = mcqQuestion.getChoices();
		for (int i = 0; i < choices.size(); i++) {
			if (i == choices.size() - 1) {
				formatted += choices.get(i) + COLUMN_DELIMITER;
			} else {
				formatted += choices.get(i) + CHOICE_DELIMITER;
			}
		}

		// TODO write the formatted into a file
		this.writer.println(formatted);
		this.writer.flush();

	}

	public List<MCQQuestion> readAllQuestions() throws FileNotFoundException {

		List<MCQQuestion> results = new ArrayList<MCQQuestion>();

		// TODO read all the line from the file
		Scanner scanner = new Scanner(this.file);
//		String[] linesFromFile;
		String line = "";
		while (scanner.hasNextLine()) {
			line = scanner.nextLine();
			String[] parts = line.split(COLUMN_DELIMITER);

			Long id = Long.valueOf(parts[0]);
			Integer difficulty = Integer.valueOf(parts[1]);
			String content = parts[2];
			String[] readTopics = parts[3].split(TOPIC_DELIMITER);

			MCQQuestion reconstruction = new MCQQuestion();
			reconstruction.setDifficulty(difficulty);
			reconstruction.setContent(content);
			reconstruction.setTopics(readTopics);
			reconstruction.setId(id);
			System.out.println(Arrays.asList(parts[3]));
			System.out.println(Arrays.asList(readTopics));
			results.add(reconstruction);
		}

		return results;
	}

}
